<ribbon:RibbonWindow
    xmlns:ribbon="http://schemas.actiprosoftware.com/winfx/xaml/ribbon"
    xmlns:shared="http://schemas.actiprosoftware.com/winfx/xaml/shared"
    xmlns:docking="http://schemas.actiprosoftware.com/winfx/xaml/docking"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"    
    xmlns:inf="http://www.grandsys.com/luna"
    xmlns:cal="http://www.caliburnproject.org"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:behaviors="clr-namespace:Luna.WPF.ApplicationFramework.Behaviors;assembly=Luna.WPF.ApplicationFramework"
    xmlns:themes="http://schemas.actiprosoftware.com/winfx/xaml/themes"
    xmlns:System_ComponentModel="clr-namespace:System.ComponentModel;assembly=PresentationFramework" x:Class="Luna.GUI.Views.ShellView"
    Title="{inf:Resource ProductTitle}" WindowState="Maximized"
    Icon="/Luna.GUI;component/Resources/Images/WMSLogo.ico"
    cal:Message.Attach="[Event Closing] = [Action OnClosing($eventArgs)]"
    xmlns:ribbonControlsPrimitives="clr-namespace:ActiproSoftware.Windows.Controls.Ribbon.Controls.Primitives;assembly=ActiproSoftware.Ribbon.Wpf351"
     behaviors:CommandBidingBehavior.RegisterCommandBindings="{Binding CommandBindings}">
    <ribbon:RibbonWindow.Resources>
    </ribbon:RibbonWindow.Resources>
    <DockPanel>
        <ribbon:Ribbon x:Name="ribbon" DockPanel.Dock="Top" ApplicationButtonLabel="Plan">
            <ribbon:Ribbon.Resources>

                <!-- Styles for Backstage content -->

                <Style x:Key="ContentBoxBorderStyle" TargetType="{x:Type Border}">
                    <Setter Property="Background" Value="#b0ffffff" />
                    <Setter Property="BorderBrush" Value="#ffffff" />
                    <Setter Property="BorderThickness" Value="1" />
                    <Setter Property="Padding" Value="7" />
                    <Setter Property="VerticalAlignment" Value="Top" />
                </Style>

                <LinearGradientBrush x:Key="DottedHorizontalSeparatorBrush" StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Color="#c7c8c9" Offset="0.5" />
                    <GradientStop Color="Transparent" Offset="0.501" />
                </LinearGradientBrush>

                <Style x:Key="{x:Type ribbon:Backstage}" TargetType="{x:Type TabControl}">
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.ApplicationMenuOuterBorderBrushKey}}" />
                    <Setter Property="BorderThickness" Value="0" />
                    <Setter Property="Focusable" Value="true" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.BackstageForegroundBrushKey}}" />
                    <Setter Property="TabStripPlacement" Value="Left" />
                    <Setter Property="SnapsToDevicePixels" Value="True"/>
                    <!--<Setter Property="CanContentScroll" Value="true" />
                    <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
                    <Setter Property="VerticalScrollBarVisibility" Value="Auto" />-->
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabControl}">
                                <Border Background="White" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <DockPanel Background="{TemplateBinding Background}" KeyboardNavigation.TabNavigation="Cycle" SnapsToDevicePixels="true">
                                        <Rectangle DockPanel.Dock="Top" Height="2" Fill="{DynamicResource {x:Static themes:RibbonCommonDictionary.ApplicationMenuTransitionBrushKey}}" />

                                        <ribbon:PopupContentDecorator>
                                            <DockPanel>
                                                <Border DockPanel.Dock="Left" MinWidth="130" MaxWidth="165" Background="{DynamicResource {x:Static themes:RibbonCommonDictionary.BackstageHeaderBackgroundBrushKey}}">
                                                    <Grid>
                                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                                                            <Rectangle Width="4" Fill="{DynamicResource {x:Static themes:RibbonCommonDictionary.BackstageHeaderShadowBrushKey}}" />
                                                            <Rectangle Width="1" Fill="{DynamicResource {x:Static themes:RibbonCommonDictionary.BackstageHeaderBorderBrushKey}}" />
                                                        </StackPanel>
                                                        <StackPanel Margin="0,5,0,5" ZIndex="1" IsItemsHost="true" />
                                                    </Grid>
                                                </Border>
                                                <Border KeyboardNavigation.TabNavigation="Local" KeyboardNavigation.DirectionalNavigation="Contained">
                                                    <ContentPresenter Name="PART_SelectedContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}" ContentSource="SelectedContent" />
                                                </Border>
                                            </DockPanel>
                                        </ribbon:PopupContentDecorator>

                                    </DockPanel>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ActivePlan,Converter={StaticResource IsNotNullConverter}}" Value="true">
                            <Setter Property="behaviors:BackstageService.SelectedIndex" Value="6"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ActivePlan,Converter={StaticResource IsNotNullConverter}}" Value="false">
                            <Setter Property="behaviors:BackstageService.SelectedIndex" Value="7"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>

            </ribbon:Ribbon.Resources>

            <!-- Tab Panel Items (Appear next to the tabs) -->
            <!-- Buttons used to minimize/restore/close primary window -->
            <ribbon:Ribbon.TabPanelItems>

                <ribbon:ToggleMinimizationButton />

                <!-- Minimize -->
                <ribbon:Button Command="{x:Static docking:WindowCommands.Minimize}"
						CommandTarget="{Binding ElementName=standardMdiHost}" ImageSourceSmall="/Resources/Images/Minimize216.png"
						Visibility="{Binding IsMDIChildMaximized, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=window}" />

                <!-- Restore -->
                <ribbon:Button Command="{x:Static docking:WindowCommands.Restore}"
						CommandTarget="{Binding ElementName=standardMdiHost}" ImageSourceSmall="/Resources/Images/Restore16.png"
						Visibility="{Binding IsMDIChildMaximized, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=window}" />

                <!-- Close -->
                <ribbon:Button Command="{x:Static docking:WindowCommands.Close}"
						CommandTarget="{Binding ElementName=standardMdiHost}" ImageSourceSmall="/Resources/Images/CloseButton16.png"
						Visibility="{Binding IsMDIChildMaximized, Converter={StaticResource BooleanToVisibilityConverter}, ElementName=window}" />

            </ribbon:Ribbon.TabPanelItems>

            <ribbon:Ribbon.QuickAccessToolBarItems>
                <ribbon:Button ImageSourceSmall="/Resources/Images/Save16.png" Label="Save" Command="Save"/>
                <ribbon:Button ImageSourceSmall="/Resources/Images/Undo16.png" Label="Undo" Command="Undo" />
            </ribbon:Ribbon.QuickAccessToolBarItems>


            <ribbon:Ribbon.ApplicationMenu>
                <!-- Backstage (Could alternatively use ApplicationMenu control) -->
                <ribbon:Backstage x:Name="appMenu" >
                    <!-- NOTE: Put your own background watermark here
					<ribbon:Backstage.Background>
						<ImageBrush ImageSource="/Resources/Images/BackstageBackground.png" Stretch="None" TileMode="None" AlignmentX="Right" AlignmentY="Bottom" />
					</ribbon:Backstage.Background>
					-->

                    <ribbon:Button Label="Save" ImageSourceSmall="/Resources/Images/Save16.png" KeyTipAccessText="S" />
                    <ribbon:Button Label="Save As" ImageSourceSmall="/Resources/Images/SaveAs16.png" KeyTipAccessText="A" />
                    <ribbon:Button Label="Open" Command="ApplicationCommands.Open" ImageSourceSmall="/Resources/Images/Open16.png" KeyTipAccessText="O" />
                    <ribbon:Button Label="Close" ImageSourceSmall="/Resources/Images/Close16.png" KeyTipAccessText="C" />

                    <ribbon:Separator />
                    <ribbon:RecentDocumentMenu>
                        <shared:RecentDocumentManager x:Name="smallRecentDocManager" MaxFilteredDocumentCount="4" />
                    </ribbon:RecentDocumentMenu>

                    <ribbon:BackstageTab Header="Info" KeyTipAccessText="I"    cal:View.Model="{cal:Resolve {x:Type inf:IBackstageTabPresenter}, Key=Infomation}"                                        
                                        IsEnabled="{Binding ActivePlan,Mode=OneWay,Converter={StaticResource IsNotNullConverter}}"
                                       >
                    </ribbon:BackstageTab>

                    <ribbon:BackstageTab Header="Recent" KeyTipAccessText="R">
                        <Border Style="{StaticResource ContentBoxBorderStyle}"
                                cal:View.Model="{cal:Resolve {x:Type inf:IBackstageTabPresenter}, Key=RecentSchedule}" />

                    </ribbon:BackstageTab>

                    <ribbon:BackstageTab Header="Import" KeyTipAccessText="I">
                        <Border cal:View.Model="{cal:Resolve {x:Type inf:IShiftImportPresenter}}"/>
                    </ribbon:BackstageTab>

                    <ribbon:BackstageTab x:Name="newBackstageTab" Header="Settings" KeyTipAccessText="N">
                        <Border Style="{StaticResource ContentBoxBorderStyle}">
                            <StackPanel Margin="19,9">
                                <ribbon:Separator Label="Basic Management" Context="BackstageItem" />

                                <DockPanel Margin="7,22,0,18">
                                    <ribbon:Button DockPanel.Dock="Left" Label="Assignment Type"  Context="BackstageItem" VariantSize="Large" VerticalAlignment="Top" StaysOpenOnClick="True"
                                                   Command="inf:ApplicationCommands.OpenTermStyleManager" ImageSourceLarge="/Resources/Images/Shifts32.png"/>
                                    <StackPanel Margin="18,0,0,0">
                                        <TextBlock Text="Assignment Type" FontSize="13" FontWeight="Bold" TextTrimming="CharacterEllipsis"/>
                                        <TextBlock Margin="0,5,0,0" Text="Manage AssignmentType and EventType." TextWrapping="Wrap" />
                                    </StackPanel>
                                </DockPanel>
                                <Rectangle Height="2" Stroke="{StaticResource DottedHorizontalSeparatorBrush}" StrokeThickness="1" StrokeDashArray="2 2" RenderOptions.EdgeMode="Aliased" />

                                <DockPanel Margin="7,22,0,18">
                                    <ribbon:Button DockPanel.Dock="Left" Label="Calendar Event"  Context="BackstageItem" VariantSize="Large" VerticalAlignment="Top" StaysOpenOnClick="True"
                                                   Command="inf:ApplicationCommands.OpenCalendarEvent" ImageSourceLarge="/Resources/Images/CalendarEvent32.png" >
                                        <ribbon:Button.Template>
                                            <ControlTemplate TargetType="{x:Type ribbonControlsPrimitives:ButtonBase}">

                                                <Grid SnapsToDevicePixels="true">
                                                    <Rectangle Name="OuterBorder" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" RadiusX="1" RadiusY="1" SnapsToDevicePixels="true" />
                                                    <Rectangle Name="RadialBackground" Fill="Transparent" RadiusX="1" RadiusY="1" SnapsToDevicePixels="true" />
                                                    <Grid Margin="{TemplateBinding Padding}">
                                                        <Grid.RowDefinitions>
                                                            <RowDefinition Name="PART_Button" Height="{DynamicResource ButtonBaseLargeIconHeightGridLength}" />
                                                            <RowDefinition Height="*" />
                                                        </Grid.RowDefinitions>
                                                        <Image Name="Image" Margin="3,0,3,0" Width="32" Height="32" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="Uniform" Source="{TemplateBinding ImageSourceLarge}" SnapsToDevicePixels="true" />
                                                        <TextBlock Text="{Binding Path=Day,Source={x:Static sys:DateTime.Today}}" 
                                                                   Margin="0,12,0,0" HorizontalAlignment="Center"/>
                                                        <ribbonControlsPrimitives:TwoLineLabel Name="Label" Grid.Row="1" Margin="3,0,3,0" IsEnabled="{TemplateBinding IsEnabled}" 
                                                                                               HorizontalAlignment="Center" VerticalAlignment="Top" Label="{TemplateBinding Label}" 
                                                                                               SnapsToDevicePixels="true" Foreground="{TemplateBinding Foreground}" />
                                                    </Grid>
                                                    <Rectangle Name="InnerBorder" Margin="1" RadiusX="1" RadiusY="1" SnapsToDevicePixels="true" />
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="themes:ThemeProperties.CornerRadius" Value="3">
                                                        <Setter TargetName="OuterBorder" Property="RadiusX" Value="3" />
                                                        <Setter TargetName="OuterBorder" Property="RadiusY" Value="3" />
                                                    </Trigger>

                                                    <Trigger Value="{x:Null}" Property="ImageSourceLarge">
                                                        <Setter Property="Source" TargetName="Image" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageSourceSmall}" 
                                                                />
                                                    </Trigger>
                                                    <Trigger Property="IsEnabled" Value="false">
                                                        <Setter TargetName="Image" Property="Opacity" Value="0.4" />
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="true" />
                                                            <Condition Property="IsChecked" Value="False" />
                                                            <Condition Property="IsMouseOver" Value="true" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" Property="Stroke" />
                                                        <Setter TargetName="InnerBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" Property="Stroke" />
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="true" />
                                                            <Condition Property="IsChecked" Value="False" />
                                                            <Condition Property="IsKeyboardFocused" Value="true" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlOuterBorderHoverBrushKey}}" Property="Stroke" />
                                                        <Setter TargetName="InnerBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlInnerBorderHoverBrushKey}}" Property="Stroke" />
                                                    </MultiTrigger>
                                                    <Trigger Property="IsChecked" Value="True">
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeBackgroundSelectedBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlOuterBorderSelectedBrushKey}}" Property="Stroke" />
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="true" />
                                                            <Condition Property="IsChecked" Value="True" />
                                                            <Condition Property="IsMouseOver" Value="true" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverSelectedBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}" Property="Stroke" />
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="true" />
                                                            <Condition Property="IsChecked" Value="True" />
                                                            <Condition Property="IsKeyboardFocused" Value="true" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeBackgroundHoverSelectedBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlOuterBorderHoverSelectedBrushKey}}" Property="Stroke" />
                                                    </MultiTrigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsEnabled" Value="true" />
                                                            <Condition Property="IsPressed" Value="true" />
                                                        </MultiTrigger.Conditions>
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeBackgroundPressedBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="OuterBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlOuterBorderPressedBrushKey}}" Property="Stroke" />
                                                        <Setter TargetName="RadialBackground" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlLargeRadialBackgroundPressedBrushKey}}" Property="Fill" />
                                                        <Setter TargetName="InnerBorder" Value="{DynamicResource {x:Static themes:RibbonCommonDictionary.RibbonControlInnerBorderPressedBrushKey}}" Property="Stroke" />
                                                    </MultiTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>

                                        </ribbon:Button.Template>
                                    </ribbon:Button>
                                    <StackPanel Margin="18,0,0,0">
                                        <TextBlock Text="Calendar Event" FontSize="13" FontWeight="Bold" TextTrimming="CharacterEllipsis"/>
                                        <TextBlock Margin="0,5,0,0" Text="Edit daylight saving,holidays,weekends on the Calendar." TextWrapping="Wrap" />
                                    </StackPanel>
                                </DockPanel>
                                <Rectangle Height="2" Stroke="{StaticResource DottedHorizontalSeparatorBrush}" StrokeThickness="1" StrokeDashArray="2 2" RenderOptions.EdgeMode="Aliased" />

                                <DockPanel Margin="7,22,0,18">
                                    <ribbon:Button DockPanel.Dock="Left" Label="Open Excel"  Context="BackstageItem" VariantSize="Large" VerticalAlignment="Top"
                                                   Command="inf:ApplicationCommands.OpenShiftImport"/>
                                    <StackPanel Margin="18,0,0,0">
                                        <TextBlock Text="Assignment Import" FontSize="13" FontWeight="Bold" TextTrimming="CharacterEllipsis" />
                                        <TextBlock Margin="0,5,0,0" Text="Import agent assignments." TextWrapping="Wrap" />
                                    </StackPanel>
                                </DockPanel>
                                <Rectangle Height="2" Stroke="{StaticResource DottedHorizontalSeparatorBrush}" StrokeThickness="1" StrokeDashArray="2 2" RenderOptions.EdgeMode="Aliased" />
                            </StackPanel>
                        </Border>
                    </ribbon:BackstageTab>

                    <ribbon:BackstageTab Header="Attendance" KeyTipAccessText="P">
                        <Border Style="{StaticResource ContentBoxBorderStyle}">
                            <StackPanel Margin="19,9">
                                <ribbon:Separator Label="Attendance" Context="BackstageItem" />
                            </StackPanel>
                        </Border>
                    </ribbon:BackstageTab>



                    <ribbon:BackstageTab Header="Save &amp; Send" KeyTipAccessText="D">
                        <ribbon:TaskTabControl Margin="27,17" SelectedIndex="1">
                            <ribbon:Separator Label="Save &amp; Send" />
                            <ribbon:TaskTabItem>
                                <ribbon:TaskTabItem.Header>
                                    <DockPanel MinWidth="250">
                                        <Image Width="32" Height="32"  Stretch="None" VerticalAlignment="Center" />
                                        <TextBlock Margin="20,0,0,0" Text="Send Using E-mail" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
                                    </DockPanel>
                                </ribbon:TaskTabItem.Header>

                                <Border Style="{StaticResource ContentBoxBorderStyle}" Padding="0">
                                    <StackPanel>
                                        <ribbon:Separator Label="Send Using E-mail" Context="BackstageItem" />

                                        <DockPanel Margin="0,18,0,18">
                                            <ribbon:Button DockPanel.Dock="Left" Label="Send as Attachment" Context="BackstageItem" VariantSize="Large" VerticalAlignment="Top" />
                                            <TextBlock MinWidth="30" Margin="18,0,0,0" Text="Attach a copy of this document to an e-mail." TextWrapping="Wrap" />
                                        </DockPanel>
                                        <Rectangle Height="2" Stroke="{StaticResource DottedHorizontalSeparatorBrush}" StrokeThickness="1" StrokeDashArray="2 2" RenderOptions.EdgeMode="Aliased" />
                                    </StackPanel>
                                </Border>
                            </ribbon:TaskTabItem>
                            <ribbon:TaskTabItem>
                                <ribbon:TaskTabItem.Header>
                                    <DockPanel MinWidth="250">
                                        <Image Width="32" Height="32" Stretch="None" VerticalAlignment="Center" />
                                        <TextBlock Margin="20,0,0,0" Text="Save to Web" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
                                    </DockPanel>
                                </ribbon:TaskTabItem.Header>

                                <ribbon:Separator Label="Save to Web" Context="BackstageItem" />
                            </ribbon:TaskTabItem>
                            <ribbon:TaskTabItem>
                                <ribbon:TaskTabItem.Header>
                                    <DockPanel MinWidth="250">
                                        <Image Width="32" Height="32" Stretch="None" VerticalAlignment="Center" />
                                        <TextBlock Margin="20,0,0,0" Text="Publish as Blog Post" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
                                    </DockPanel>
                                </ribbon:TaskTabItem.Header>

                                <ribbon:Separator Label="Publish as Blog Post" Context="BackstageItem" />
                            </ribbon:TaskTabItem>
                            <ribbon:Separator Label="File Types" />
                            <ribbon:TaskTabItem>
                                <ribbon:TaskTabItem.Header>
                                    <DockPanel MinWidth="250">
                                        <Image Width="32" Height="32" Stretch="None" VerticalAlignment="Center" />
                                        <TextBlock Margin="20,0,0,0" Text="Change File Type" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
                                    </DockPanel>
                                </ribbon:TaskTabItem.Header>

                                <ribbon:Separator Label="Change File Type" Context="BackstageItem" />
                            </ribbon:TaskTabItem>
                        </ribbon:TaskTabControl>
                    </ribbon:BackstageTab>

                    <ribbon:BackstageTab Header="Help" KeyTipAccessText="H">
                        <Border Style="{StaticResource ContentBoxBorderStyle}">
                            <StackPanel Margin="19,9">
                                <ribbon:Separator Label="Help" Context="BackstageItem" />
                            </StackPanel>
                        </Border>
                    </ribbon:BackstageTab>

                    <ribbon:Button Label="Options" ImageSourceSmall="/Resources/Images/Options16.png" KeyTipAccessText="T" />
                    <ribbon:Button Label="Exit" ImageSourceSmall="/Resources/Images/CloseTab16.png" KeyTipAccessText="X" />

                </ribbon:Backstage>

            </ribbon:Ribbon.ApplicationMenu>
            <ribbon:Tab Label="Edit" IsChecked="False" x:Name="TabEdit">
                <!--<ribbon:Group Label="Bulk Dispatch">
                    <ribbon:Button Label="批次調度" ImageSourceLarge="/Resources/Images/Batch32.png"/>
                </ribbon:Group>-->

                <ribbon:Group Label="Arrange">
                    <ribbon:Button Label="{inf:Resource Shifts_ShiftComposer_Optimize}" ImageSourceLarge="/Resources/Images/Rocket.png"/>
                    <ribbon:Button Label="Estimate" Command="inf:ApplicationCommands.ShowEstimateShift"
        				CommandParameter="Estimation"
        				ImageSourceLarge="/Resources/Images/Calculator32.png"/>
                </ribbon:Group>

                <ribbon:Group Label="Sort">
                    <!--<ribbon:Button Label="{inf:Resource Shifts_ShiftDispatcher_SortByShiftName}"
        				Command="inf:ApplicationCommands.SortByTermName"
        				ImageSourceLarge="/Resources/Images/Sort32.png"
                                />-->
                    <ribbon:Button Command="inf:ApplicationCommands.SortByTermStart"
        				ImageSourceLarge="/Resources/Images/Clock32.png"
        				Label="{inf:Resource Shifts_ShiftDispatcher_SortByDateTime}"/>
                    <!--<ribbon:Button Label="{inf:Resource Shifts_ShiftDispatcher_SortByAgentName}"
        				Command="inf:ApplicationCommands.SortByAgentName"
        				ImageSourceLarge="/Resources/Images/join.png"/>-->

                </ribbon:Group>
                <ribbon:Group Label="Edit">
                    <ribbon:Button Command="inf:ApplicationCommands.LockTerm" ImageSourceSmall="/Resources/Images/Lock32.png" />
                    <ribbon:StackPanel ItemVariantBehavior="MediumThenSmallWhenSmall">

                        <ribbon:Button ImageSourceSmall="/Resources/Images/Recycle16.png" 
        					Label="{inf:Resource Shifts_ShiftDispatcher_Delete}"/>

                        <ribbon:Button x:Name="ShiftPainter" Command="inf:ApplicationCommands.ShiftPainter"
        					Label="Stamp"
        					ImageSourceSmall="/Resources/Images/Stamp16.png"/>
                    </ribbon:StackPanel>
                </ribbon:Group>
                <ribbon:Group Label="Event">
                    <ribbon:Button Label="{inf:Resource Shifts_ShiftDispatcher_AddEvent}" ImageSourceLarge="/Resources/Images/AddingSubEvent32.png" Command="inf:ApplicationCommands.AddingEvent"/>
                </ribbon:Group>
                
                <ribbon:Group Label="Holiday">
                    <ribbon:Button Command="inf:ApplicationCommands.SetDayOff" ImageSourceSmall="/Resources/Images/Rest32.png" />
                </ribbon:Group>

                <!--<ribbon:Group Label="Absent">
                    <ribbon:RibbonGallery Label="Quick Styles" 
        				ItemsSource="{DynamicResource AbsentEventTypes}"
        				IsSelectionHighlightVisible="False">
                        <ribbon:RibbonGallery.ItemTemplate>
                            <DataTemplate>
                                <TextBlock Text="{Binding Name}"/>
                            </DataTemplate>
                        </ribbon:RibbonGallery.ItemTemplate>
                    </ribbon:RibbonGallery>
                    <ribbon:StackPanel ItemVariantBehavior="MediumThenSmallWhenSmall">
                        <ribbon:Button ImageSourceSmall="/Resources/Images/Absent16.png" Label="{inf:Resource Shifts_ShiftDispatcher_Fully}"/>
                        <ribbon:Button ImageSourceSmall="/Resources/Images/PartialAbsent16.png" Label="{inf:Resource Shifts_ShiftDispatcher_Shortly}"/>
                    </ribbon:StackPanel>
                </ribbon:Group>
                <ribbon:Group Label="Seat">
                    <ribbon:Button Label="Seat Dispatcher" Command="inf:ApplicationCommands.SeatDispatcher"
        				ImageSourceLarge="/Resources/Images/TermToSeat32.png"/>
                    <ribbon:StackPanel ItemVariantBehavior="MediumThenSmallWhenSmall">
                        <ribbon:Button Label="{inf:Resource Shifts_ShiftDispatcher_RescheduleSeat}"
        					Command="inf:ApplicationCommands.RescheduleSeat"/>
                        <ribbon:Button Label="{inf:Resource Shifts_ShiftDispatcher_CancelSeat}"
        					Command="inf:ApplicationCommands.CancelSeat"/>
                        <ribbon:Button Label="{inf:Resource Seating_SeatDispatcher_AssignSeatDirectly}"
        					Command="inf:ApplicationCommands.AssignSeat"/>
                    </ribbon:StackPanel>
                </ribbon:Group>-->
            </ribbon:Tab>
            <ribbon:Tab Label="View" KeyTipAccessText="V">

                <ribbon:Group Label="Filter">
                    <ribbon:Button Label="CustomGroup" ImageSourceLarge="/Resources/Images/CustomGroup32.png"
                                   />
                    <ribbon:StackPanel ItemVariantBehavior="MediumThenSmallWhenSmall">
                        <ribbon:Button ImageSourceSmall="/Resources/Images/Search16.png" Command="inf:ApplicationCommands.OpenAgentFinder"/>
                    </ribbon:StackPanel>
                </ribbon:Group>

                <ribbon:Group Label="Statistic">
                    <ribbon:Button Label="Analysis" Command="inf:ApplicationCommands.OpenStaffingStatistic"
        				CommandParameter="Analysis"
        				ImageSourceLarge="/Resources/Images/chart_curve5.png"/>


                    <ribbon:Button Label="Combine"  Command="inf:ApplicationCommands.OpenCompositiveServiceQueue"
        				CommandParameter="CompositiveServiceQueue"
        				ImageSourceLarge="/Resources/Images/Bricks32.png"/>

                    <ribbon:StackPanel ItemVariantBehavior="MediumThenSmallWhenSmall">
                        <ribbon:Button ImageSourceSmall="/Resources/Images/ExcelExport16.png" Label="Export SL"
        					Command="inf:ApplicationCommands.ExportSvcLevelData"/>
                    </ribbon:StackPanel>
                </ribbon:Group>               

                <ribbon:Group Label="Shift Views">
                    <shared:PixelSnapper/>
                    <ribbon:Button Label="Cell" ImageSourceLarge="/Resources/Images/CellMode.png" Command="inf:ApplicationCommands.SwitchView" IsChecked="{Binding ActivePlan.CellMode,FallbackValue=false}" CommandParameter="true"/>
                    <ribbon:Button Label="Block" ImageSourceLarge="/Resources/Images/BlockMode.png" Command="inf:ApplicationCommands.SwitchView" IsChecked="{Binding ActivePlan.CellMode,Converter={StaticResource BooleanInverseConverter},FallbackValue=false}" CommandParameter="false"/>
                </ribbon:Group>
                
                <!--<ribbon:Group Label="Adherence">
                    <ribbon:Button Command="inf:ApplicationCommands.AdherenceMonitoring" Label="Monitoring"
        				ImageSourceSmall="/Resources/Images/RTAA32.png"/>
                    <ribbon:Button Command="inf:ApplicationCommands.AdherenceStatistic" Label="Statistic"
        				ImageSourceLarge="/Resources/Images/RTAAStatistic32.png"/>
                    <ribbon:Button Label="Prefix"
        				ImageSourceLarge="/Resources/Images/RTAAPrefix32.png"/>
                </ribbon:Group>-->

            </ribbon:Tab>
            <!--<ribbon:Tab Label="Manage">
                <ribbon:Group Label="Shifts">
                    <ribbon:Button Label="Shifts" Command="inf:ApplicationCommands.OpenTermStyleManager"
        				ImageSourceLarge="/Resources/Images/Shifts32.png"/>
                </ribbon:Group>
                <ribbon:Group Label="CalendarEvent">
                    <ribbon:Button Label="CalendarEvent" Command="inf:ApplicationCommands.OpenCalendarEvent" ImageSourceLarge="/Resources/Images/CalendarEvent32.png"/>
                </ribbon:Group>
            </ribbon:Tab>-->
        </ribbon:Ribbon>
        <!--<ContentPresenter Margin="7"
                          cal:View.Model="{cal:Resolve inf:IDockSitePresenter}"/>-->
        <!-- DockSite -->
        <docking:DockSite x:Name="dockSite" cal:View.Model="{cal:Resolve {x:Type inf:IDockSitePresenter}}" cal:View.Context="displayLocation">
            <!--<docking:DockSite.AutoHideLeftContainers>
                <docking:ToolWindowContainer>
                    <docking:ToolWindow Title="Toolbox" ImageSource="/Resources/Images/Toolbox16.png" />
                </docking:ToolWindowContainer>
            </docking:DockSite.AutoHideLeftContainers>-->
            <docking:SplitContainer>
                <docking:Workspace>
                    <docking:StandardMdiHost BorderThickness="0" x:Name="standardMdiHost" AreMaximizedWindowFramesVisible="False"/>
                </docking:Workspace>
            </docking:SplitContainer>
        </docking:DockSite>
    </DockPanel>

</ribbon:RibbonWindow>
